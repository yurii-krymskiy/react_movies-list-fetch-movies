{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","services/movie.ts","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onSubmit","onInputChange","queryValue","isLoading","isNotFound","setIsNotFound","foundMovie","addNewMovie","useState","hasTitleError","setHasTitleError","htmlFor","value","onChange","event","target","onBlur","type","id","placeholder","cn","disabled","trim","length","onClick","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","App","setMovies","setFoundMovie","setIsLoading","setQuery","onSearchMovieSubmit","a","preventDefault","normalizedQuery","response","Object","hasOwn","url","movieData","Poster","test","checkIsValidUrl","imdbID","Title","Plot","newQuery","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc59c297.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { FormEvent, useState } from 'react';\nimport cn from 'classnames';\n\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  onSubmit: (event: FormEvent) => void;\n  onInputChange: (value: string) => void;\n  queryValue: string;\n  isLoading: boolean;\n  isNotFound: boolean;\n  setIsNotFound: (value: boolean) => void;\n  foundMovie: Movie | null,\n  addNewMovie: () => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({\n  onSubmit,\n  onInputChange,\n  queryValue,\n  isLoading,\n  isNotFound,\n  setIsNotFound,\n  foundMovie,\n  addNewMovie,\n}) => {\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const onQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onInputChange(event.target.value);\n    setHasTitleError(false);\n\n    if (isNotFound) {\n      setIsNotFound(false);\n    }\n  };\n\n  const onTitleBlur = () => {\n    if (!queryValue) {\n      setHasTitleError(true);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={onSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={queryValue}\n              onChange={onQueryChange}\n              onBlur={onTitleBlur}\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': hasTitleError,\n              })}\n            />\n            {hasTitleError && (\n              <p className=\"help is-danger\">\n                Title is required\n              </p>\n            )}\n          </div>\n\n          {isNotFound && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button', 'is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={queryValue.trim().length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {foundMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addNewMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {foundMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n\n          <MovieCard movie={foundMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = 'e3f1c8c1';\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { FormEvent, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { getMovie } from './api';\nimport { MovieData } from './types/MovieData';\nimport { checkIsValidUrl } from './services/movie';\n\nfunction getImageUrl(url: string): string {\n  // eslint-disable-next-line\n  const defaultPoster = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n  return checkIsValidUrl(url) ? url : defaultPoster;\n}\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [foundMovie, setFoundMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isNotFound, setIsNotFound] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const onSearchMovieSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n    const normalizedQuery = query.trim();\n\n    if (!normalizedQuery) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await getMovie(normalizedQuery);\n\n      if (Object.hasOwn(response, 'Error')) {\n        setIsNotFound(true);\n        setQuery('');\n\n        return;\n      }\n\n      const movieData = response as MovieData;\n      const imgUrl = getImageUrl(movieData.Poster);\n      const imdbUrl = `https://www.imdb.com/title/${movieData.imdbID}`;\n\n      setFoundMovie({\n        title: movieData.Title,\n        description: movieData.Plot,\n        imgUrl,\n        imdbUrl,\n        imdbId: movieData.imdbID,\n      });\n    } catch {\n      setIsNotFound(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addNewMovie = () => {\n    if (!foundMovie) {\n      return;\n    }\n\n    const isExistMovie = movies.some(\n      movie => movie.imdbId === foundMovie.imdbId,\n    );\n\n    if (!isExistMovie) {\n      setMovies([...movies, foundMovie]);\n    }\n\n    setQuery('');\n    setFoundMovie(null);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          onSubmit={onSearchMovieSubmit}\n          onInputChange={(newQuery) => setQuery(newQuery)}\n          queryValue={query}\n          isLoading={isLoading}\n          isNotFound={isNotFound}\n          setIsNotFound={setIsNotFound}\n          foundMovie={foundMovie}\n          addNewMovie={addNewMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","export function checkIsValidUrl(url: string) {\n  // eslint-disable-next-line\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return pattern.test(url);\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}